from aiogram import F, Router
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

import app.keyboards as kb
import app.validator as vd
from info.text import DESCRIPTION_HERO, DESCRIPTION_SETTING, TEST_RESULT, TEST, STORY

router = Router()
print('–ï–±–∞—à—å')


class Register(StatesGroup):
    name = State()
    character_one = State()
    character_two = State()
    character_three = State()
    hero = State()
    setting = State()


class Fable(StatesGroup):
    stage = State()
    current = State()


class Setting(StatesGroup):
    setting = State()
    answer_setting = State()


async def check_result_test(message: Message, test: str) -> bool:
    result_test = TEST_RESULT[test]
    if message.text not in result_test:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ', reply_markup=kb.reply_kb(result_test))
        return True
    return False


# async def check_result_story(message: Message, button_reply) -> bool:  # –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É\
#     if message.text not in button_reply:
#         await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ', reply_markup=kb.reply_kb(button_reply))
#         return True
#     return False

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await message.answer('text1: –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ /fable')


@router.message(Command('fable'))
async def cmd_fable(message: Message, state: FSMContext):
    await state.set_state(Register.name)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –≤–∞—à–µ–≥–æ –≥–µ—Ä–æ—è üìù')


@router.message(Register.name)
async def register_name(message: Message, state: FSMContext):
    if message.text == None:
        await message.answer('–ù–∞–ø–∏—à–∏ –∏–º—è —Ç–µ–∫—Å—Ç–æ–º')
        return

    await state.update_data(name=message.text)
    await state.set_state(Register.character_one)

    button_inline, url = TEST[0]
    await message.answer('–í—Ä–µ–º—è –ø—Ä–æ–π—Ç–∏ –ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç', reply_markup=kb.inline_test(button_inline, url))

    button_reply = TEST_RESULT['character_one']
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç', reply_markup=kb.reply_kb(button_reply))


@router.message(Register.character_one)
async def register_character_one(message: Message, state: FSMContext):
    if await check_result_test(message, 'character_one'):
        return

    await state.update_data(character_one=message.text)
    await state.set_state(Register.character_two)

    button_inline, url = TEST[1]
    await message.answer('–í—Ä–µ–º—è –ø—Ä–æ–π—Ç–∏ –≤—Ç–æ—Ä–æ–π —Ç–µ—Å—Ç', reply_markup=kb.inline_test(button_inline, url))

    button_reply = TEST_RESULT['character_two']
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç', reply_markup=kb.reply_kb(button_reply))


@router.message(Register.character_two)
async def register_character_two(message: Message, state: FSMContext):
    if await check_result_test(message, 'character_two'):
        return

    await state.update_data(character_two=message.text)
    await state.set_state(Register.character_three)

    button_inline, url = TEST[2]
    await message.answer('–í—Ä–µ–º—è –ø—Ä–æ–π—Ç–∏ —Ç—Ä–µ—Ç–∏–π —Ç–µ—Å—Ç', reply_markup=kb.inline_test(button_inline, url))

    button_reply = TEST_RESULT['character_three']
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç', reply_markup=kb.reply_kb(button_reply))


@router.message(Register.character_three)
async def register_character_three(message: Message, state: FSMContext):
    if await check_result_test(message, 'character_three'):
        return

    await state.update_data(character_three=message.text)
    await state.set_state(Register.hero)

    button_inline, url = TEST[3]
    await message.answer('–ö–æ–ª–µ—Å–æ —Ñ–æ—Ä—Ç—É–Ω—ã –ø–æ–¥—Å–∫–∞–∂–µ—Ç, —á—Ç–æ —É –≤–∞—Å –±—É–¥–µ—Ç –∑–∞ –≥–µ—Ä–æ–π',
                         reply_markup=kb.inline_test(button_inline, url))

    button_reply = TEST_RESULT['hero']
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç', reply_markup=kb.reply_kb(button_reply))


@router.message(Register.hero)
async def register_hero(message: Message, state: FSMContext):
    if await check_result_test(message, 'hero'):
        return

    await state.update_data(hero=message.text)
    await state.set_state(Setting.setting)

    data = await state.get_data()

    await message.answer(f'–í–∞—à–µ –∏–º—è: {data["name"]}\n–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂: {data["hero"]}\n{DESCRIPTION_HERO[data["hero"]]}\n'
                         f'–í–∞—à–∏ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏: {data["character_one"]}, {data["character_two"]}, '
                         f'{data["character_three"]}')

    button_reply = TEST_RESULT['setting']
    await message.answer('–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ–º —Å–µ—Ç—Ç–∏–Ω–≥ —Å–∫–∞–∑–∫–∏', reply_markup=kb.reply_kb(button_reply, 1))


@router.message(Setting.setting)
async def setting(message: Message, state: FSMContext):
    if await check_result_test(message, 'setting'):
        return

    await state.update_data(setting=message.text)
    await state.set_state(Setting.answer_setting)

    description = DESCRIPTION_SETTING[message.text]
    button_reply = TEST_RESULT['answer_setting']
    await message.answer(description, reply_markup=kb.reply_kb(button_reply))


@router.message(Setting.answer_setting)
async def setting_answer(message: Message, state: FSMContext):
    if await check_result_test(message, 'answer_setting'):
        return

    yes, no = TEST_RESULT['answer_setting']
    if message.text == yes:
        await state.set_state(Fable.stage)
        await state.update_data(current=-1)
        await message.answer('–°–æ—Ö—Ä–∞–Ω—è—é...\n–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø–∏—Å–∞—Ç—å —Å–∫–∞–∑–∫—É\n–í—ã–±–µ—Ä–∏—Ç–µ  <b>–∑–∞—á–∏–Ω</b> –¥–ª—è –≤–∞—à–µ–π —Å–∫–∞–∑–∫–∏')

        result, button_reply = vd.generation_msg(-1)
        await message.answer(result, reply_markup=kb.reply_kb(button_reply))

    else:
        await state.set_state(Setting.setting)
        button_reply = TEST_RESULT['setting']
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫–∞–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Å–µ—Ç—Ç–∏–Ω–≥',
                             reply_markup=kb.reply_kb(button_reply, 1))


@router.message(Command('lol'))
async def lol(message: Message, state: FSMContext):
    await state.set_state(Fable.stage)
    await state.update_data(current=-1)
    await message.answer('Go')


@router.message(Fable.stage)
async def fable_stage(message: Message, state: FSMContext):
    data_cur = await state.get_data()
    current = data_cur.get('current')  # —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stage = data_cur.get('stage')  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏–∏

    if not vd.check_but_story(message.text, current):  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞–∂–∞–ª –ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É
        button_reply = vd.generation_button(current)  # –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å—Ç–∞—Ç—É—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer('–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏', reply_markup=kb.reply_kb(button_reply))

    number_cur_story = vd.num_story(message.text)  # –ü–æ –æ—Ç–≤–µ—Ç—É –ø–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(current=number_cur_story)  # –ú–µ–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    new_stage = f'{stage}, {number_cur_story}'  # –î–æ–ø–æ–ª–Ω—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(stage=new_stage)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    result, button_reply = vd.generation_msg(number_cur_story)
    await message.answer(result, reply_markup=kb.reply_kb(button_reply))

    # if await check_result_story(message, button_reply):
    #     return
    #
    #
    # await state.update_data(one=number_story)
    # await state.set_state(Fable.two)
    # data = await state.get_data()
    # print(data)
    #
    # result, button_reply = vd.one(message.text)
    # await message.answer(result, reply_markup=kb.reply_kb(button_reply))

# @router.message(Fable.two)
# async def fable_two(message: Message, state: FSMContext):
#     result, button_reply = vd.two(message.text)
#     if await check_result_story(message, button_reply):
#         return
#
#     number_story = num_story(message.text)
#     await state.update_data(two=number_story)
#     await state.set_state(Fable.three)
#
#     result, button_reply = vd.two(message.text)
#     await message.answer(result, reply_markup=kb.reply_kb(button_reply))
